# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateDutyInput {
  times: [TimeIntervalInput!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Device model"""
type Device {
  _id: ID!
  category: String!
  createdAt: DateTime!
  createdBy: UserGraphQLContext!
  image: Image
  model: String
  name: String!
}

input DeviceCreateInput {
  category: String!
  image: ImageInput
  model: String
  name: String!
}

input DeviceEditInput {
  """The id of device which will be editted"""
  _id: ID!
  category: String
  image: ImageInput
  model: String
  name: String
}

input DeviceFilter {
  category: String
  model: String
  name: String
}

input DeviceOptions {
  filter: DeviceFilter
  numPage: Float
  perPage: Float
  sort: DeviceSort
}

input DeviceSort {
  category: Float
  model: Float
  name: Float
}

"""The Duty model"""
type Duty {
  _id: ID!
  date: DateTime!
  subscriberAvatar: String
  subscriberId: String!
  subscriberName: String!
  times: [TimeInterval!]
}

type FileMedia {
  id: String!
  path: String!
}

type Image {
  id: String!
  path: String!
}

input ImageInput {
  id: String!
  path: String!
}

type Mutation {
  createAdmin(input: UserCreateInput!): User!
  createDevice(file: Upload, input: DeviceCreateInput!): Device!
  createDevices(input: [DeviceCreateInput!]!): [Device!]!
  createRole(input: MutationRoleInput!): Role!
  createTask(input: TaskCreateInput!): Task!
  createUser(input: UserCreateInput!): User!
  deleteDevice(input: String!): Device!
  deleteImage(id: String!): Boolean!
  deleteRole(name: String!): Role!
  deleteTask(input: TaskWhereUniqueInput!): Task!
  deleteUser(input: String!): User!
  editDevice(file: Upload, input: DeviceEditInput!): Device!
  editRole(input: MutationRoleInput!): Role!
  editTask(input: TaskEditInput!): Task!
  editUser(input: UserEditInput!): User!
  registerDuty(input: CreateDutyInput!): Duty!
  setUserRole(input: SetUserRoleInput!): User!
  unsubcribeDuty(input: UnsubcribeDutyInput!): Duty!
  upload(file: Upload): FileMedia!
}

input MutationRoleInput {
  name: String!
  permissions: [String!]!
}

type Permissions {
  api: String!
  group: String!
  permissions: [String!]!
}

type Query {
  device(input: String!): Device!
  devices(options: DeviceOptions): [Device!]!

  """Get all duties"""
  duties: [Duty!]!

  """Get all duties by date"""
  dutiesByDate(date: DateTime!): [Duty!]!
  getAdmin: User!
  getPermissionsConfig: [Permissions!]!
  getRole(name: String!): Role!
  getRoles: [Role!]!
  getUser(input: String!): User!
  getUsers: [User!]!
  system: System!
  tasks: [Task!]!
  temporaryUploadFiles: [FileMedia!]!
}

type Role {
  _id: ID!
  createdAt: DateTime!
  createdBy: UserGraphQLContext!
  name: String!
  permissions: [String!]!
  updatedAt: DateTime!
  updatedBy: UserGraphQLContext!
}

input SetUserRoleInput {
  _id: String!
  role: String!
}

type Subscription {
  newSubscriber: Duty!
  newUnsubscriber: Duty!
}

type System {
  hasOwnerAccount: Boolean!
}

"""The Task model"""
type Task {
  _id: ID!
  createdAt: DateTime!
  ownerId: String!
  title: String!
}

input TaskCreateInput {
  title: String!
}

input TaskEditInput {
  """The id of task which will be editted"""
  _id: ID!
  title: String!
}

input TaskWhereUniqueInput {
  """The id of task"""
  _id: ID!
}

type TimeInterval {
  end: DateTime!
  start: DateTime!
}

input TimeIntervalInput {
  end: DateTime!
  start: DateTime!
}

input UnsubcribeDutyInput {
  date: DateTime!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ID!
  avatar: String
  class: String
  createdAt: DateTime
  email: String!
  faculty: String
  googleId: String!
  name: String
  roles: [String!]!
  specialty: String
  studentId: String
}

input UserCreateInput {
  class: String
  faculty: String
  name: String
  specialty: String
  studentId: String
}

input UserEditInput {
  _id: ID!
  class: String
  faculty: String
  name: String
  roles: [String!]
  specialty: String
  studentId: String
}

type UserGraphQLContext {
  avatar: String!
  email: String!
  id: ID!
  name: String!
}
